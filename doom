screenWidth) * fov;
        let distanceToWall = 0;
        let hitWall = false;
        let boundary = false;  // Para acentuar bordas

        const eyeX = Math.cos(rayAngle);
        const eyeY = Math.sin(rayAngle);

        // Avança o raio até bater em uma parede ou atingir a distância máxima
        while (!hitWall && distanceToWall < depth) {
          distanceToWall += 0.05;
          const testX = Math.floor(playerX + eyeX * distanceToWall);
          const testY = Math.floor(playerY + eyeY * distanceToWall);
          if (testX < 0 || testX >= mapWidth || testY < 0 || testY >= mapHeight) {
            hitWall = true;
            distanceToWall = depth;
          } else {
            if (map[testY][testX] === '#') {
              hitWall = true;
              // Verifica bordas para efeito de contorno
              let p = [];
              for (let tx = 0; tx < 2; tx++) {
                for (let ty = 0; ty < 2; ty++) {
                  const vx = (testX + tx) - playerX;
                  const vy = (testY + ty) - playerY;
                  const d = Math.sqrt(vx * vx + vy * vy);
                  const dot = (eyeX * vx / d) + (eyeY * vy / d);
                  p.push([d, dot]);
                }
              }
              p.sort((a, b) => a[0] - b[0]);
              const boundAngle = 0.01;
              if (Math.acos(p[0][1]) < boundAngle) {
                boundary = true;
              }
            }
          }
        }

        let pixel = ' ';
        // Determina onde começa o teto e o chão nesta coluna
        const ceiling = Math.floor(screenHeight / 2 - screenHeight / distanceToWall);
        const floorLine = screenHeight - ceiling;

        if (y < ceiling) {
          // Teto: aplica um degradê usando ceilingShades
          const t = y / ceiling;
          let shadeIndex = Math.floor(t * ceilingShades.length);
          if (shadeIndex < 0) shadeIndex = 0;
          if (shadeIndex >= ceilingShades.length) shadeIndex = ceilingShades.length - 1;
          pixel = ceilingShades[shadeIndex];
        } else if (y >= ceiling && y <= floorLine) {
          // Parede: usa sombreamento baseado na distância e verifica contornos
          if (boundary) {
            pixel = '|';
          } else {
            const ratio = distanceToWall / depth;
            let shadeIndex = Math.floor(ratio * wallShades.length);
            if (shadeIndex < 0) shadeIndex = 0;
            if (shadeIndex >= wallShades.length) shadeIndex = wallShades.length - 1;
            pixel = wallShades[shadeIndex];
          }
        } else {
          // Chão: aplica sombreamento conforme a distância
          const b = 1 - ((y - screenHeight / 2) / (screenHeight / 2));
          let floorIndex = Math.floor(b * floorShades.length);
          if (floorIndex < 0) floorIndex = 0;
          if (floorIndex >= floorShades.length) floorIndex = floorShades.length - 1;
          pixel = floorShades[floorIndex];
        }
        output += pixel;
      }
      output += "\n";
    }

    // 6. HUD e Minimapa
    let hud = "";
    hud += "ASCII DOOM  |  FPS: " + fps + "\n";
    hud += "Posição: (" + playerX.toFixed(2) + ", " + playerY.toFixed(2) + ") | Ângulo: " + (playerAngle * (180/Math.PI)).toFixed(2) + "°\n\n";
    hud += "MINIMAPA:\n";
    for (let my = 0; my < mapHeight; my++) {
      let line = "";
      for (let mx = 0; mx < mapWidth; mx++) {
        if (Math.floor(playerY) === my && Math.floor(playerX) === mx) {
          if (playerAngle >= -0.5 && playerAngle < 0.5) line += ">";
          else if (playerAngle >= 0.5 && playerAngle < 1.5) line += "v";
          else if (playerAngle >= -1.5 && playerAngle < -0.5) line += "^";
          else line += "<";
        } else {
          line += map[my][mx];
        }
      }
      hud += line + "\n";
    }
    output = hud + "\n" + output;

    // Atualiza o container com o frame renderizado
    container.textContent = output;

    requestAnimationFrame(gameLoop);
  }

  // Inicia o loop do jogo
  gameLoop();
})();